// ---------------------------
// Spotless
// ---------------------------
spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

// ---------------------------
// Checkstyle
// ---------------------------

checkstyle {
    toolVersion = "12.0.1"
    config = resources.text.fromUri("https://raw.githubusercontent.com/ar-ecommerce-platform/.github/develop/gradle/checkstyle/google_checks.xml")
    ignoreFailures = false
    showViolations = true
}

// Make `check` run everything in the right order
tasks.named('check').configure {
    dependsOn 'spotlessCheck', 'checkstyleMain', 'checkstyleTest'
}

tasks.withType(Checkstyle).configureEach {
    reports {
        html.required = true
        xml.required = false
    }
}

// ---------------------------
// OWASP Dependency Check
// ---------------------------
dependencyCheck {
    failBuildOnCVSS = 7.0
    autoUpdate = true
    format = 'ALL'
    outputDirectory = layout.buildDirectory.dir("reports/owasp/${project.name}").get().asFile
    nvd {
        apiKey = System.getenv("NVD_API_KEY")
    }
    analyzers {
        ossIndex {
            enabled = true
            username = project.findProperty("ossindexUsername") ?: System.getenv("OSSINDEX_USERNAME")
            password = project.findProperty("ossindexPassword") ?: System.getenv("OSSINDEX_TOKEN")
        }
    }
}

// ---------------------------
// Snyk Container Scan
// ---------------------------
tasks.register('snykContainerScan', Exec) {
    group = "verification"
    description = "Scan Docker image with Snyk"

    def imageName = project.findProperty('image_name')
    if (!imageName) {
        logger.lifecycle("No image_name specified for Snyk scan. Skipping.")
    } else {
        commandLine 'snyk', 'container', 'test', imageName
    }
}

// ---------------------------
// Unit Tests + JaCoCo
// ---------------------------
tasks.named('test') {
    description = "Runs unit tests"
    group = "verification"
    useJUnitPlatform()

    reports {
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/tests/unit/${project.name}"))
    }

    jacoco {
        // The `.exec` file is used by `jacocoTestReport` to generate coverage reports.
        destinationFile = layout.buildDirectory.file("jacoco/${project.name}/test.exec").get().asFile
    }

    // Generate coverage report automatically
    finalizedBy tasks.jacocoTestReport
}

tasks.jacocoTestReport {
    group = "verification"
    dependsOn tasks.test
    executionData.setFrom(layout.buildDirectory.file("jacoco/${project.name}/test.exec"))

    reports {
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/${project.name}/coverage.xml"))

        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/${project.name}/html"))
    }
}

tasks.jacocoTestCoverageVerification {
    group = "verification"
    dependsOn tasks.test
    executionData.setFrom(layout.buildDirectory.file("jacoco/${project.name}/test.exec"))

    violationRules {
        rule {
            limit {
                minimum = 0.80 // fail if coverage < 80%
            }
        }
    }
}
